–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å SparkJava –Ω–∞ Spring Boot, —ç—Ç–æ –≤–ø–æ–ª–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ. Spring Boot –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ –∏ –≥–∏–±–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É Kafka, REST API –∏ —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Spring Data JPA.

–î–∞–≤–∞–π—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Spring Boot.
–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ Spring Boot –ø—Ä–æ–µ–∫—Ç–∞
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Maven pom.xml)

–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –≤–∞—à pom.xml:
xml
Copy

<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- PostgreSQL Driver -->
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
    </dependency>

    <!-- Spring Kafka -->
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>

    <!-- Lombok (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>

Run HTML
–®–∞–≥ 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Spring Boot
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka –∏ PostgreSQL
---------- here ----------

–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª application.yml –≤ src/main/resources:
yaml
Copy

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/app_db
    username: app_user
    password: password
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: request-consumer

–®–∞–≥ 3: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 1 (Producer –∏ Status Updater)
–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö

–°–æ–∑–¥–∞–π—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã requests:
java
Copy

package com.example.demo.model;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
public class Request {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String data;
    private String status = "PENDING";
}

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
java
Copy

package com.example.demo.repository;

import com.example.demo.model.Request;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RequestRepository extends JpaRepository<Request, Long> {
}

Kafka Producer

–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka:
java
Copy

package com.example.demo.service;

import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaProducerService {
    private final KafkaTemplate<String, String> kafkaTemplate;

    public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendMessage(String topic, String key, String value) {
        kafkaTemplate.send(topic, key, value);
    }
}

REST Controller

–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–æ–≤:
java
Copy

package com.example.demo.controller;

import com.example.demo.model.Request;
import com.example.demo.repository.RequestRepository;
import com.example.demo.service.KafkaProducerService;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class RequestController {
    private final RequestRepository requestRepository;
    private final KafkaProducerService kafkaProducerService;

    public RequestController(RequestRepository requestRepository, KafkaProducerService kafkaProducerService) {
        this.requestRepository = requestRepository;
        this.kafkaProducerService = kafkaProducerService;
    }

    @PostMapping("/send")
    public String sendRequest(@RequestBody String data) {
        Request request = new Request();
        request.setData(data);
        request = requestRepository.save(request);

        kafkaProducerService.sendMessage("requests", request.getId().toString(), data);
        return "Request saved with ID: " + request.getId();
    }
}

Kafka Consumer (Status Updater)

–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Kafka –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
java
Copy

package com.example.demo.service;

import com.example.demo.model.Request;
import com.example.demo.repository.RequestRepository;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class KafkaConsumerService {
    private final RequestRepository requestRepository;

    public KafkaConsumerService(RequestRepository requestRepository) {
        this.requestRepository = requestRepository;
    }

    @KafkaListener(topics = "statuses", groupId = "status-updater")
    public void updateStatus(String status) {
        String[] parts = status.split(":");
        Long id = Long.parseLong(parts[0]);
        String newStatus = parts[1];

        requestRepository.findById(id).ifPresent(request -> {
            request.setStatus(newStatus);
            requestRepository.save(request);
        });
    }
}

–®–∞–≥ 4: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 2 (Consumer)
–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö

–°–æ–∑–¥–∞–π—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã processed_requests:
java
Copy

package com.example.demo.model;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
public class ProcessedRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long requestId;
    private String data;
    private String status;
}

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
java
Copy

package com.example.demo.repository;

import com.example.demo.model.ProcessedRequest;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProcessedRequestRepository extends JpaRepository<ProcessedRequest, Long> {
}

Kafka Consumer

–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏:
java
Copy

package com.example.demo.service;

import com.example.demo.model.ProcessedRequest;
import com.example.demo.repository.ProcessedRequestRepository;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class KafkaConsumerService {
    private final ProcessedRequestRepository processedRequestRepository;
    private final KafkaProducerService kafkaProducerService;

    public KafkaConsumerService(ProcessedRequestRepository processedRequestRepository, KafkaProducerService kafkaProducerService) {
        this.processedRequestRepository = processedRequestRepository;
        this.kafkaProducerService = kafkaProducerService;
    }

    @KafkaListener(topics = "requests", groupId = "request-consumer")
    public void processRequest(String key, String data) {
        ProcessedRequest processedRequest = new ProcessedRequest();
        processedRequest.setRequestId(Long.parseLong(key));
        processedRequest.setData(data);
        processedRequest.setStatus("SUCCESS");
        processedRequestRepository.save(processedRequest);

        kafkaProducerService.sendMessage("statuses", key, key + ":SUCCESS");
    }
}

–®–∞–≥ 5: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

    –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL –∏ Kafka.

    –°–æ–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    bash
    Copy

    mvn clean package
    java -jar app1/target/app1.jar
    java -jar app2/target/app2.jar

–ò—Ç–æ–≥

–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Spring Boot –≤–º–µ—Å—Ç–æ SparkJava. Spring Boot –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kafka, REST API –∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å! üòä
