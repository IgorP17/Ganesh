pipeline {
    agent any

    environment {
        PROJECT_DIR = "${WORKSPACE}"
        APP1_PORT = "8080"
        APP2_PORT = "8081"
        APP3_PORT = "8082"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/IgorP17/Ganesh.git'
                    ]]
                ])
            }
        }

        stage('Check Running Apps') {
            steps {
                script {
                    def isApp1Running = sh(script: "netstat -tuln | grep ${APP1_PORT} || true", returnStatus: true) == 0
                    def isApp2Running = sh(script: "netstat -tuln | grep ${APP2_PORT} || true", returnStatus: true) == 0
                    def isApp3Running = sh(script: "netstat -tuln | grep ${APP3_PORT} || true", returnStatus: true) == 0

                    if (!isApp1Running) {
                        sh "cd ${PROJECT_DIR}/app1 && mvn spring-boot:run &"
                        sleep(time: 10, unit: 'SECONDS') // Ожидаем запуск
                    }
                    if (!isApp2Running) {
                        sh "cd ${PROJECT_DIR}/app2 && mvn spring-boot:run &"
                        sleep(time: 10, unit: 'SECONDS')
                    }
                    if (!isApp3Running) {
                        sh "cd ${PROJECT_DIR}/app3 && mvn spring-boot:run &"
                        sleep(time: 15, unit: 'SECONDS') // App3 может требовать больше времени
                    }
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                dir("${PROJECT_DIR}/app3") {
                    sh 'mvn test -Dtest=EndToEndTest'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
    }

    post {
        always {
            script {
                // Останавливаем приложения
                sh "pkill -f 'app1/target' || true"
                sh "pkill -f 'app2/target' || true"
                sh "pkill -f 'app3/target' || true"

                // Очистка
                sh "mvn clean -f ${PROJECT_DIR}/app1"
                sh "mvn clean -f ${PROJECT_DIR}/app2"
                sh "mvn clean -f ${PROJECT_DIR}/app3"
            }
        }
    }
}


===================== используем В общем да
Даём рекурсивные права на чтение, запись и выполнение:
bash
Copy

sudo chmod -R 777 /home/igor/apache-maven-3.6.3/

ls -ld /home/igor/apache-maven-3.6.3/

В Jenkinsfile измените команду на:
groovy
Copy

sh '/home/igor/apache-maven-3.6.3/bin/mvn test -Dtest=EndToEndTest'


=====================================================================
В Jenkinsfile измените команду на:
groovy
Copy

sh 'sudo -u igor /home/igor/apache-maven-3.6.3/bin/mvn test -Dtest=EndToEndTest'

================ НЕТ
Альтернативное решение (если перемещение не работает):
1. Оставим Maven на месте, но дадим права:
bash
Copy

sudo chmod -R o+rx /home/igor/apache-maven-3.6.3

2. Создадим скрипт-обертку в /usr/local/bin:
bash
Copy

sudo tee /usr/local/bin/mvn << 'EOF'
#!/bin/sh
export MAVEN_HOME=/home/igor/apache-maven-3.6.3
exec "$MAVEN_HOME/bin/mvn" "$@"
EOF

sudo chmod +x /usr/local/bin/mvn

3. Проверим:
bash
Copy

sudo -u jenkins mvn -version

=====================    БИЛ пропустить это
1. Удалим неработающий симлинк:
bash
Copy

sudo rm /usr/local/bin/mvn

2. Правильно установим Maven для всех пользователей:
bash
Copy

# Переместим Maven в /opt с сохранением путей
sudo mv /home/igor/apache-maven-3.6.3 /opt/
sudo chown -R root:root /opt/apache-maven-3.6.3

# Создадим правильный запускающий скрипт
sudo tee /usr/local/bin/mvn << 'EOF'
#!/bin/sh
export MAVEN_HOME=/opt/apache-maven-3.6.3
exec "$MAVEN_HOME/bin/mvn" "$@"
EOF

# Дадим права на выполнение
sudo chmod +x /usr/local/bin/mvn

3. Настроим переменные окружения:
bash
Copy

# Для всех пользователей
sudo tee /etc/profile.d/maven.sh << 'EOF'
export MAVEN_HOME=/opt/apache-maven-3.6.3
export PATH=$MAVEN_HOME/bin:$PATH
EOF

# Применим настройки
source /etc/profile.d/maven.sh

4. Проверим от пользователя jenkins:
bash
Copy

sudo -u jenkins bash -c 'mvn -version'

5. Настройка Jenkins:

В Jenkinsfile убедитесь, что используете простое обращение к mvn:
groovy
Copy

stage('Run E2E Tests') {
    steps {
        dir('app3') {
            sh 'mvn test -Dtest=EndToEndTest'
        }
    }
}

6. Дополнительные проверки:
bash
Copy

# Проверим пути
sudo -u jenkins bash -c 'which mvn && mvn -version'

# Проверим доступ к .m2
sudo mkdir -p /var/lib/jenkins/.m2
sudo chown jenkins:jenkins /var/lib/jenkins/.m2