–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1 (Producer):
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç HTTP POST-–∑–∞–ø—Ä–æ—Å.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Kafka.

    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2 (Consumer):
        –ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É PostgreSQL.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Kafka (–Ω–∞–ø—Ä–∏–º–µ—Ä, SUCCESS –∏–ª–∏ FAILED).
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1 (Status Updater):
        –ß–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã–π —Ç–æ–ø–∏–∫ Kafka.
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ PostgreSQL.

–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL:
    bash
    Copy

    sudo apt update
    sudo apt install postgresql postgresql-contrib

    –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ PostgreSQL:
    bash
    Copy

    sudo systemctl start postgresql
    sudo systemctl enable postgresql

    –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    bash
    Copy

    sudo -u postgres psql
    CREATE DATABASE app_db;
    CREATE USER app_user WITH PASSWORD 'password';
    GRANT ALL PRIVILEGES ON DATABASE app_db TO app_user;
    \q

    –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã:

        –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
        sql
        Copy

        CREATE TABLE requests (
            id SERIAL PRIMARY KEY,
            data TEXT NOT NULL,
            status VARCHAR(50) DEFAULT 'PENDING'
        );

        –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
        sql
        Copy

        CREATE TABLE processed_requests (
            id SERIAL PRIMARY KEY,
            request_id INT NOT NULL,
            data TEXT NOT NULL,
            status VARCHAR(50) NOT NULL
        );

–®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka

    –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Kafka:
    bash
    Copy

    wget https://downloads.apache.org/kafka/3.6.0/kafka_2.13-3.6.0.tgz
    tar -xzf kafka_2.13-3.6.0.tgz
    cd kafka_2.13-3.6.0

    –ó–∞–ø—É—Å—Ç–∏—Ç–µ Zookeeper –∏ Kafka:
    bash
    Copy

    bin/zookeeper-server-start.sh config/zookeeper.properties
    bin/kafka-server-start.sh config/server.properties

    –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫–∏:
    bash
    Copy

    bin/kafka-topics.sh --create --topic requests --bootstrap-server localhost:9092
    bin/kafka-topics.sh --create --topic statuses --bootstrap-server localhost:9092

–®–∞–≥ 3: –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ Java-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1 (Producer –∏ Status Updater)
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Maven pom.xml):
xml
Copy

<dependencies>
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
        <version>3.6.0</version>
    </dependency>
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>42.6.0</version>
    </dependency>
    <dependency>
        <groupId>com.sparkjava</groupId>
        <artifactId>spark-core</artifactId>
        <version>2.9.4</version>
    </dependency>
</dependencies>

Run HTML
–ö–æ–¥:
java
Copy

import org.apache.kafka.clients.producer.*;
import org.apache.kafka.clients.consumer.*;
import spark.Spark;

import java.sql.*;
import java.util.Properties;

public class App1 {
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/app_db";
    private static final String DB_USER = "app_user";
    private static final String DB_PASSWORD = "password";

    public static void main(String[] args) {
        // Producer
        Spark.post("/send", (req, res) -> {
            String data = req.body();
            int id = saveToDatabase(data);
            sendToKafka("requests", id, data);
            return "Request saved with ID: " + id;
        });

        // Status Updater
        new Thread(() -> {
            Properties props = new Properties();
            props.put("bootstrap.servers", "localhost:9092");
            props.put("group.id", "status-updater");
            props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
            props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");

            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
            consumer.subscribe(List.of("statuses"));

            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(100);
                for (ConsumerRecord<String, String> record : records) {
                    updateStatusInDatabase(record.value());
                }
            }
        }).start();
    }

    private static int saveToDatabase(String data) throws SQLException {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("INSERT INTO requests (data) VALUES (?)", Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, data);
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return -1;
    }

    private static void sendToKafka(String topic, int id, String data) {
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

        Producer<String, String> producer = new KafkaProducer<>(props);
        producer.send(new ProducerRecord<>(topic, String.valueOf(id), data));
        producer.close();
    }

    private static void updateStatusInDatabase(String status) throws SQLException {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("UPDATE requests SET status = ? WHERE id = ?")) {
            stmt.setString(1, status);
            stmt.setInt(2, Integer.parseInt(status.split(":")[0]));
            stmt.executeUpdate();
        }
    }
}

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2 (Consumer)
–ö–æ–¥:
java
Copy

import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.clients.producer.*;
import java.sql.*;
import java.util.Properties;

public class App2 {
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/app_db";
    private static final String DB_USER = "app_user";
    private static final String DB_PASSWORD = "password";

    public static void main(String[] args) {
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put("group.id", "request-consumer");
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");

        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
        consumer.subscribe(List.of("requests"));

        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(100);
            for (ConsumerRecord<String, String> record : records) {
                processRequest(record.key(), record.value());
            }
        }
    }

    private static void processRequest(String id, String data) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("INSERT INTO processed_requests (request_id, data, status) VALUES (?, ?, ?)")) {
            stmt.setInt(1, Integer.parseInt(id));
            stmt.setString(2, data);
            stmt.setString(3, "SUCCESS");
            stmt.executeUpdate();

            sendStatusToKafka(id + ":SUCCESS");
        } catch (SQLException e) {
            e.printStackTrace();
            sendStatusToKafka(id + ":FAILED");
        }
    }

    private static void sendStatusToKafka(String status) {
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

        Producer<String, String> producer = new KafkaProducer<>(props);
        producer.send(new ProducerRecord<>("statuses", status));
        producer.close();
    }
}

–®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

    –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL –∏ Kafka.

    –°–æ–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Java-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    bash
    Copy

    mvn clean package
    java -jar app1/target/app1.jar
    java -jar app2/target/app2.jar

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª –∏–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å! üòä
New chat
